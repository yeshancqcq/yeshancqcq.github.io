axis.ticks.y.left = element_line(color="black", size = 0.2),
axis.ticks.x = element_line(color="black", size = 0.2),
axis.text.x = element_text(),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y.left = element_line(color="black", size = 0.2),
legend.justification = c(0, 0),
legend.position = c(0.1,0.213),
legend.key = element_blank()
)+
scale_y_continuous(limits = c(0,0.6),breaks = scales::pretty_breaks(n = 5))+
ggtitle("N = 24; Bandwidth = 0.6368") +
labs(y = "Density",
x = "Read_SIT_PRE_Total")
p2
p2 <- ggplot() +
geom_density(data=data, aes(x=Read_SIT_PRE_Total),fill = "red") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y.left = element_line(color="black", size = 0.2),
axis.ticks.x = element_line(color="black", size = 0.2),
axis.text.x = element_text(),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y.left = element_line(color="black", size = 0.2),
legend.justification = c(0, 0),
legend.position = c(0.1,0.213),
legend.key = element_blank()
)+
scale_y_continuous(limits = c(0,0.6),breaks = scales::pretty_breaks(n = 5))+
scale_x_continuous(limits = c(2,8))
p2 <- ggplot() +
geom_density(data=data, aes(x=Read_SIT_PRE_Total),fill = "red") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y.left = element_line(color="black", size = 0.2),
axis.ticks.x = element_line(color="black", size = 0.2),
axis.text.x = element_text(),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y.left = element_line(color="black", size = 0.2),
legend.justification = c(0, 0),
legend.position = c(0.1,0.213),
legend.key = element_blank()
)+
scale_y_continuous(limits = c(0,0.6),breaks = scales::pretty_breaks(n = 5))+
scale_x_continuous(limits = c(2,8))+
ggtitle("N = 24; Bandwidth = 0.6368") +
labs(y = "Density",
x = "Read_SIT_PRE_Total")
p2
p2 <- ggplot() +
geom_density(data=data, aes(x=Read_SIT_PRE_Total),fill = "red") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y.left = element_line(color="black", size = 0.2),
axis.ticks.x = element_line(color="black", size = 0.2),
axis.text.x = element_text(),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y.left = element_line(color="black", size = 0.2),
legend.justification = c(0, 0),
legend.position = c(0.1,0.213),
legend.key = element_blank()
)+
scale_y_continuous(limits = c(0,0.6),breaks = scales::pretty_breaks(n = 5))+
scale_x_continuous(limits = c(2,9))+
ggtitle("N = 24; Bandwidth = 0.6368") +
labs(y = "Density",
x = "Read_SIT_PRE_Total")
p2
p2 <- ggplot() +
geom_density(data=data, aes(x=Read_SIT_PRE_Total),fill = "red") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y.left = element_line(color="black", size = 0.2),
axis.ticks.x = element_line(color="black", size = 0.2),
axis.text.x = element_text(),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y.left = element_line(color="black", size = 0.2),
legend.justification = c(0, 0),
legend.position = c(0.1,0.213),
legend.key = element_blank()
)+
scale_y_continuous(limits = c(0,0.6),breaks = scales::pretty_breaks(n = 5))+
scale_x_continuous(limits = c(1,9))+
ggtitle("N = 24; Bandwidth = 0.6368") +
labs(y = "Density",
x = "Read_SIT_PRE_Total")
p2
p2 <- ggplot() +
geom_density(data=data, aes(x=Read_SIT_PRE_Total)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y.left = element_line(color="black", size = 0.2),
axis.ticks.x = element_line(color="black", size = 0.2),
axis.text.x = element_text(),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y.left = element_line(color="black", size = 0.2),
legend.justification = c(0, 0),
legend.position = c(0.1,0.213),
legend.key = element_blank()
)+
scale_y_continuous(limits = c(0,0.6),breaks = scales::pretty_breaks(n = 5))+
scale_x_continuous(limits = c(1,9))+
ggtitle("N = 24; Bandwidth = 0.6368") +
labs(y = "Density",
x = "Read_SIT_PRE_Total")
p2
p2 <- ggplot() +
geom_density(data=data, aes(x=Read_SIT_PRE_Total)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y.left = element_line(color="black", size = 0.2),
axis.ticks.x = element_line(color="black", size = 0.2),
axis.text.x = element_text(),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y.left = element_line(color="black", size = 0.2),
legend.justification = c(0, 0),
legend.position = c(0.1,0.213),
legend.key = element_blank()
)+
scale_y_continuous(limits = c(0,0.4),breaks = scales::pretty_breaks(n = 5))+
scale_x_continuous(limits = c(1,9))+
ggtitle("N = 24; Bandwidth = 0.6368") +
labs(y = "Density",
x = "Read_SIT_PRE_Total")
p2
p2 <- ggplot() +
geom_density(data=data, aes(x=Read_SIT_PRE_Total)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y.left = element_line(color="black", size = 0.2),
axis.ticks.x = element_line(color="black", size = 0.2),
axis.text.x = element_text(),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y.left = element_line(color="black", size = 0.2),
legend.justification = c(0, 0),
legend.position = c(0.1,0.213),
legend.key = element_blank()
)+
scale_y_continuous(limits = c(0,0.3),breaks = scales::pretty_breaks(n = 5))+
scale_x_continuous(limits = c(1,9))+
ggtitle("N = 24; Bandwidth = 0.6368") +
labs(y = "Density",
x = "Read_SIT_PRE_Total")
p2
p1 <- ggplot() +
geom_density(data=data, aes(x=Read_Int_Pre_Total)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y.left = element_line(color="black", size = 0.2),
axis.ticks.x = element_line(color="black", size = 0.2),
axis.text.x = element_text(),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y.left = element_line(color="black", size = 0.2),
legend.justification = c(0, 0),
legend.position = c(0.1,0.213),
legend.key = element_blank()
) +
scale_y_continuous(limits = c(0,0.6),breaks = scales::pretty_breaks(n = 5))+
ggtitle("N = 24; Bandwidth = 0.418")+
scale_x_continuous(limits = c(1,9))+
labs(y = "Density",
x = "Read_Int_Pre_Total")
p1
p1 <- ggplot() +
geom_density(data=data, aes(x=Read_Int_Pre_Total)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y.left = element_line(color="black", size = 0.2),
axis.ticks.x = element_line(color="black", size = 0.2),
axis.text.x = element_text(),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y.left = element_line(color="black", size = 0.2),
legend.justification = c(0, 0),
legend.position = c(0.1,0.213),
legend.key = element_blank()
) +
scale_y_continuous(limits = c(0,0.5),breaks = scales::pretty_breaks(n = 5))+
ggtitle("N = 24; Bandwidth = 0.418")+
scale_x_continuous(limits = c(1,9))+
labs(y = "Density",
x = "Read_Int_Pre_Total")
p1
p1 <- plot(density(data$Read_Int_Pre_Total))
p2 <- ggplot() +
geom_density(data=data, aes(x=Read_SIT_PRE_Total)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y.left = element_line(color="black", size = 0.2),
axis.ticks.x = element_line(color="black", size = 0.2),
axis.text.x = element_text(),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y.left = element_line(color="black", size = 0.2),
legend.justification = c(0, 0),
legend.position = c(0.1,0.213),
legend.key = element_blank()
)+
scale_y_continuous(limits = c(0,0.3),breaks = scales::pretty_breaks(n = 5))+
scale_x_continuous(limits = c(1,8))+
ggtitle("N = 24; Bandwidth = 0.6368") +
labs(y = "Density",
x = "Read_SIT_PRE_Total")
p2
p2 <- ggplot() +
geom_density(data=data, aes(x=Read_SIT_PRE_Total)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y.left = element_line(color="black", size = 0.2),
axis.ticks.x = element_line(color="black", size = 0.2),
axis.text.x = element_text(),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y.left = element_line(color="black", size = 0.2),
legend.justification = c(0, 0),
legend.position = c(0.1,0.213),
legend.key = element_blank()
)+
scale_y_continuous(limits = c(0,0.3),breaks = scales::pretty_breaks(n = 5))+
scale_x_continuous(limits = c(1,9))+
ggtitle("N = 24; Bandwidth = 0.6368") +
labs(y = "Density",
x = "Read_SIT_PRE_Total")
p2
p1 <- ggplot() +
geom_density(data=data, aes(x=Read_Int_Pre_Total)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y.left = element_line(color="black", size = 0.2),
axis.ticks.x = element_line(color="black", size = 0.2),
axis.text.x = element_text(),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y.left = element_line(color="black", size = 0.2),
legend.justification = c(0, 0),
legend.position = c(0.1,0.213),
legend.key = element_blank()
) +
scale_y_continuous(limits = c(0,0.5),breaks = scales::pretty_breaks(n = 5))+
ggtitle("N = 24; Bandwidth = 0.418")+
scale_x_continuous(limits = c(1,9))+
labs(y = "Density",
x = "Read_Int_Pre_Total")
p1
p1 <- ggplot() +
geom_density(data=data, aes(x=Read_Int_Pre_Total)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y.left = element_line(color="black", size = 0.2),
axis.ticks.x = element_line(color="black", size = 0.2),
axis.text.x = element_text(),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y.left = element_line(color="black", size = 0.2),
legend.justification = c(0, 0),
legend.position = c(0.1,0.213),
legend.key = element_blank()
) +
scale_y_continuous(limits = c(0,0.5),breaks = scales::pretty_breaks(n = 5))+
ggtitle("N = 24; Bandwidth = 0.418")+
scale_x_continuous(limits = c(1,9),breaks = scales::pretty_breaks(n = 8))+
labs(y = "Density",
x = "Read_Int_Pre_Total")
p1
p2 <- ggplot() +
geom_density(data=data, aes(x=Read_SIT_PRE_Total)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y.left = element_line(color="black", size = 0.2),
axis.ticks.x = element_line(color="black", size = 0.2),
axis.text.x = element_text(),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y.left = element_line(color="black", size = 0.2),
legend.justification = c(0, 0),
legend.position = c(0.1,0.213),
legend.key = element_blank()
)+
scale_y_continuous(limits = c(0,0.3),breaks = scales::pretty_breaks(n = 5))+
scale_x_continuous(limits = c(1,9),breaks = scales::pretty_breaks(n = 8))+
ggtitle("N = 24; Bandwidth = 0.6368") +
labs(y = "Density",
x = "Read_SIT_PRE_Total")
p2
gp3 <- plot_grid(p1, p2, align = "h", nrow = 1, ncol = 2)
gp3
var1 <- data$Read_Int_Pre_Total
var2 <- data$Read_SIT_PRE_Total
describe(var1)
describe(var1)
library(testthat)
library(psych)
describe(var1)
install.packages("psych")
library(psych)
describe(var1)
table(describe(var1))
x <- table(describe(var1))
x <- data.frame(describe(var1))
View(x)
getmode <- function(v) {
uniqv <- unique(v)
x <- uniqv[which.max(tabulate(match(v, uniqv)))]
return x
}
uniqv[which.max(tabulate(match(v, uniqv)))]
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
x_mode <- Mode(var1)
x <- data.frame(describe(var2))
x_mode <- Mode(var2)
x <- data.frame(describe(var1))
x <- data.frame(describe(var2))
p3 <- ggplot() +
geom_scatter(data=data, aes(x = Read_Int_Pre_Total, y=Read_SIT_PRE_Total)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y.left = element_line(color="black", size = 0.2),
axis.ticks.x = element_line(color="black", size = 0.2),
axis.text.x = element_text(),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y.left = element_line(color="black", size = 0.2),
legend.justification = c(0, 0),
legend.position = c(0.1,0.213),
legend.key = element_blank()
)
p3 <- ggplot() +
geom_point(data=data, aes(x = Read_Int_Pre_Total, y=Read_SIT_PRE_Total)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y.left = element_line(color="black", size = 0.2),
axis.ticks.x = element_line(color="black", size = 0.2),
axis.text.x = element_text(),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y.left = element_line(color="black", size = 0.2),
legend.justification = c(0, 0),
legend.position = c(0.1,0.213),
legend.key = element_blank()
)
p3
cov(var1, var2)
cor(var1, var2,  method = "pearson")
library(readr)
cs770a2 <- read_csv("Documents/cs770a2.csv")
View(cs770a2)
install.packages("psych")
install.packages("psych")
install.packages("GPArotation")
library(psych)
library(GPArotation)
pa = fa.parallel(data, fm = 'minres', fa = 'fa')
pa = fa.parallel(cs770a2, fm = 'minres', fa = 'fa')
View(data)
View(cs770a2)
data2 = cs770a2[,6:ncol(cs770a2)]
View(data2)
pa = fa.parallel(data2, fm = 'minres', fa = 'fa')
fit = fa(datas,nfactors = 3,rotate = "varimax",fm="minres")
fit = fa(data2,nfactors = 3,rotate = "varimax",fm="minres")
print(fit$loadings,cutoff = 0.3)
library(readr)
cs770a2 <- read_csv("Documents/cs770a2.csv")
View(cs770a2)
data2 = cs770a2[,6:ncol(cs770a2)]
pa = fa.parallel(data2, fm = 'minres', fa = 'fa')
fit = fa(data2,nfactors = 3,rotate = "varimax",fm="minres")
print(fit$loadings,cutoff = 0.3)
comfort_level = cbind("DV2","DV3","DV4")
confidence_level = cbind("DV7","DV8","DV9","DV10","DV11","DV12")
trust_level = cbind("DV13","DV14","DV15","DV17","DV18")
alpha(comfort_level, na.rm = TRUE)
print(fit$loadings,cutoff = 0.5)
comfort_level = cbind(data2$DV2,data2$DV3,data2$DV4)
alpha(comfort_level, na.rm = TRUE)
confidence_level = cbind(data2$DV7,data2$DV8,data2$DV9,data2$DV10,data2$DV11, data2$DV12)
alpha(confidence_level, na.rm = TRUE)
trust_level = cbind(data2$DV13,data2$DV14,data2$DV15,data2$DV17,data2$DV18)
alpha(trust_level, na.rm = TRUE)
setwd("~/Documents/github/yeshancqcq.github.io/ncov")
library(readr)
library(stringr)
#infec <- read_csv("data/infec.csv")
#cities <- read_csv("data/cities.csv")
newdata <- read.csv("data/newdata.csv",encoding="UTF-8")
data2 <- read.csv("data/data2.csv",encoding="UTF-8")
data2 <- read.csv("data/data2.csv",encoding="UTF-8")
data3 <- data.frame(city_cn=NA,
province_cn=data2$province_cn,
city=data2$city,
province=data2$province,
lat=data2$lat,
lon=data2$lon,
cure=data2$cure,
death=data2$death,
case=data2$case,
remain=data2$remain)
newdata$check <- 0
for(i in 1:nrow(data2)){
for(j in 1:nrow(data3)){
if(data2$city[i] == data3$city[j]){
data3$city_cn[j] <- toString(data2$city_cn[i])
}
}
cat("finishing", i, "\n")
}
for(i in 1:nrow(data3)){
for(k in 1:nrow(newdata)){
if(newdata$cityName[k] == data3$city_cn[i]){
data3$cure[i] <- as.numeric(toString(newdata$curedCount[k]))
data3$death[i] <- as.numeric(toString(newdata$deadCount[k]))
data3$remain[i] <- as.numeric(toString(newdata$currentConfirmedCount[k]))
data3$case[i] <- as.numeric(toString(newdata$confirmedCount[k]))
newdata$check[k] <- 1
}
}
cat("finishing", i, "\n")
}
View(data3)
View(newdata)
#infec <- read_csv("data/infec.csv")
#cities <- read_csv("data/cities.csv")
newdata <- read.csv("data/newdata.csv",encoding="UTF-8")
for(i in 1:nrow(data3)){
for(k in 1:nrow(newdata)){
if(newdata$cityName[k] == data3$city_cn[i]){
data3$cure[i] <- as.numeric(toString(newdata$curedCount[k]))
data3$death[i] <- as.numeric(toString(newdata$deadCount[k]))
data3$remain[i] <- as.numeric(toString(newdata$currentConfirmedCount[k]))
data3$case[i] <- as.numeric(toString(newdata$confirmedCount[k]))
newdata$check[k] <- 1
}
}
cat("finishing", i, "\n")
}
for(i in 1:nrow(data3)){
for(k in 1:nrow(newdata)){
if(newdata$cityName[k] == data3$city_cn[i]){
data3$cure[i] <- as.numeric(toString(newdata$curedCount[k]))
data3$death[i] <- as.numeric(toString(newdata$deadCount[k]))
data3$remain[i] <- as.numeric(toString(newdata$currentConfirmedCount[k]))
data3$case[i] <- as.numeric(toString(newdata$confirmedCount[k]))
newdata$check[k] <- 1
}
}
cat("finishing", i, "\n")
}
newdata$check[k] <- 1
data3 <- data.frame(city_cn=NA,
province_cn=data2$province_cn,
city=data2$city,
province=data2$province,
lat=data2$lat,
lon=data2$lon,
cure=data2$cure,
death=data2$death,
case=data2$case,
remain=data2$remain)
newdata$check <- 0
for(i in 1:nrow(data2)){
for(j in 1:nrow(data3)){
if(data2$city[i] == data3$city[j]&&
data2$X<=377){
data3$city_cn[j] <- toString(data2$city_cn[i])
}
}
cat("finishing", i, "\n")
}
for(i in 1:nrow(data3)){
for(k in 1:nrow(newdata)){
if(newdata$cityName[k] == data3$city_cn[i]){
data3$cure[i] <- as.numeric(toString(newdata$curedCount[k]))
data3$death[i] <- as.numeric(toString(newdata$deadCount[k]))
data3$remain[i] <- as.numeric(toString(newdata$currentConfirmedCount[k]))
data3$case[i] <- as.numeric(toString(newdata$confirmedCount[k]))
newdata$check[k] <- 1
}
}
cat("finishing", i, "\n")
}
chongqing_dist = c("渝中区","江北区","大渡口区","南岸区","九龙坡区","两江新区","高新区","沙坪坝区" )
beijing_dist = c("西城区","海淀区","东城区","石景山区","朝阳区","丰台区","外地来京人员")
cq_cure <- 0
cq_death <- 0
cq_remain <- 0
cq_case <- 0
bj_cure <- 0
bj_death <- 0
bj_remain <- 0
bj_case <- 0
for(i in 1:nrow(newdata)){
if(newdata$cityName[i] %in% chongqing_dist){
cq_cure = as.numeric(cq_cure) + as.numeric(toString(newdata$curedCount[i]))
cq_death <- cq_death + as.numeric(toString(newdata$deadCount[i]))
cq_remain <- cq_remain + as.numeric(toString(newdata$currentConfirmedCount[i]))
cq_case <- cq_case + as.numeric(toString(newdata$confirmedCount[i]))
} else if (newdata$cityName[i] %in% beijing_dist){
bj_cure <- bj_cure + as.numeric(toString(newdata$curedCount[i]))
bj_death <- bj_death + as.numeric(toString(newdata$deadCount[i]))
bj_remain <- bj_remain + as.numeric(toString(newdata$currentConfirmedCount[i]))
bj_case <- bj_case + as.numeric(toString(newdata$confirmedCount[i]))
}
cat("finishing", i, "\n")
}
for(k in 1:nrow(data3)){
if(data3$city_cn[k] == "重庆市区"){
data3$cure[k] <- cq_cure
data3$death[k] <- cq_death
data3$remain[k] <- cq_remain
data3$case[k] <- cq_case
} else if (data3$city_cn[k] == "北京市区"){
data3$cure[k] <- bj_cure
data3$death[k] <- bj_death
data3$remain[k] <- bj_remain
data3$case[k] <- bj_case
}
}
write.csv(data3, file="data/data4.csv",fileEncoding="UTF-8")
